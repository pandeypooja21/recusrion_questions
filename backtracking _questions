intermediate questions of recursion->
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) PERMUTATION OF A STRING : tc=O(n * n!)
#include <bits/stdc++.h>
using namespace std;
void solve(int index,vector<string>& s,vector<vector<string>>& result){
    if(index==s.size()){
        result.push_back(s);
        return;
    }
    for(int i=index;i<s.size();i++){
        swap(s[i],s[index]);
        solve(index+1,s,result);
        swap(s[i],s[index]);
    }
}

int main() {
    vector<string> s={"A","B","C"};
   
    vector<vector<string>> result;
    solve(0,s,result);
    for(auto res:result){
        cout<<'{';
        for(auto i :res){
            cout<<i<<' ';
            
        }
        cout<<'}'<<endl;;
    }
   

    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) PERMUTATION OF INTEGER : tc O(n* n!)
  #include <bits/stdc++.h>
using namespace std;
void solve(int index,vector<int>& arr,vector<vector<int>>& result){
    if(index==arr.size()){
        result.push_back(arr);
        return;
    }
    for(int i=index;i<arr.size();i++){
        swap(arr[i],arr[index]);
        solve(index+1,arr,result);
        swap(arr[i],arr[index]);
    }
}

int main() {
    vector<int> arr={1,2,3};
   
    vector<vector<int>> result;
    solve(0,arr,result);
    for(auto res:result){
        cout<<'{';
        for(auto i :res){
            cout<<i<<' ';
            
        }
        cout<<'}'<<endl;;
    }
   

    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) GENERATE ALL SUBSEQUENCES AND SUBSET OF INTEGER : tc-O( 2^n * n)
#include <bits/stdc++.h>
using namespace std;
void solve(int index,vector<int>& arr,vector<int> subset,vector<vector<int>>& result){
    if(index==arr.size()){
        result.push_back(subset);
        return;
    }
    subset.push_back(arr[index]);
    solve(index+1,arr,subset,result);
    subset.pop_back();
     solve(index+1,arr,subset,result);
    
}

int main() {
    vector<int> arr={1,2,3};
    vector<int> subset;
   
    vector<vector<int>> result;
    solve(0,arr,subset,result);
    for(auto res:result){
        cout<<'{';
        for(auto i :res){
            cout<<i<<' ';
            
        }
        cout<<'}'<<endl;;
    }
   

    return 0;
}
_________________________________________________________________________________________________________________________________________________________________________________________________________________

4) GENERATE PARANTHESIS : TC=
#include <bits/stdc++.h>
using namespace std;
vector<string> result;

    void solve(int n, string curr, int open, int close) {
        if(curr.length() == 2*n) {
            result.push_back(curr);
            return;
        }
        
        if(open < n) {
            curr.push_back('(');
            solve(n, curr, open+1, close);
            curr.pop_back();
        }
        if(close < open) {
            curr.push_back(')');
            solve(n, curr, open, close+1);
            curr.pop_back();
        }
    }
    vector<string> generateParenthesis(int n) {
        string curr = "";

        solve(n, curr, 0, 0);

        return result;
    }

int main() {
 int n;
    
    cin >> n;
    
    
    vector<string> validCombinations = generateParenthesis(n);
    
    
    
    for( auto& comb : validCombinations) {
        cout << comb << endl;
    }

    return 0;
}

___________________________________________________________________________________________________________________________________________________________________________________________________________________

Q5) COMBINATIONAL SUM -1: TC=
---------------------------------------------------------------------------------------------------------
 //The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
frequency  of at least one of the chosen numbers is different.//
----------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;


void solve(int target, int i, vector<int>& combination, vector<vector<int>>& result, vector<int>& arr) {
    if (target == 0) {
        result.push_back(combination);
        return;
    }
    if (i == arr.size()) {
        return;
    }
    if (arr[i] <= target) {
        combination.push_back(arr[i]);
        solve(target - arr[i], i, combination, result, arr);
        combination.pop_back(); // backtrack
    }
    solve(target, i + 1, combination, result, arr);
}

vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<vector<int>> result;
    vector<int> combination;
    solve(target, 0, combination, result, candidates);
    return result;
}


int main() {
    // Example input
    vector<int> candidates = {2, 3, 6, 7};
    int target = 7;
    
    // Get the result
    vector<vector<int>> result = combinationSum(candidates, target);

    // Print the result
    cout << "Combinations that sum to " << target << " are:\n";
    for (const auto& combination : result) {
        cout << "[ ";
        for (int num : combination) {
            cout << num << " ";
        }
        cout << "]";
    }

    return 0;
}
__________________________________________________________________________________________________________________________________________________________________________________________________________________
Q6) SUBSET SUM :
#include <bits/stdc++.h>
using namespace std;


void solve(int index,vector<int> &arr,vector<int> &result,int n,int sum){
      if(index==n){
          result.push_back(sum);
          return;
      }
      solve(index+1,arr,result,n,sum+arr[index]);
       solve(index+1,arr,result,n,sum);
      
  }
    vector<int> subsetSums(vector<int> arr, int n) {
        vector<int> result;
       
        int sum=0;
        solve(0,arr,result,n,sum);
        return result;
        
    }
int main(){
    vector<int> arr={3,1,4};
    int n=3;
    vector<int> ans=subsetSums(arr,n);
   
    for(auto res:ans){
        cout<<res<<" ";
    }
    return 0;
}
___________________________________________________________________________________________________________________________________________________________________________________________________________________
